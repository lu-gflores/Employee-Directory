{"version":3,"sources":["components/Table.js","components/TableBody.js","components/Header.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","src","image","alt","name","first","last","phone","email","location","TableBody","state","mainlist","currentList","handleChange","item","newList","filter","employee","toLowerCase","includes","setState","sortEmail","employees","sort","a","b","this","className","onChange","e","target","value","type","placeholder","scope","onClick","map","key","login","uuid","picture","thumbnail","city","Component","Header","Wrapper","children","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wtqDAYeA,EAXD,SAACC,GACX,OACI,4BACI,4BAAI,yBAAKC,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,KAAKC,SAC3C,4BAAKL,EAAMI,KAAKC,MAAhB,IAAwBL,EAAMI,KAAKE,MACnC,4BAAKN,EAAMO,OACX,4BAAKP,EAAMQ,OACX,4BAAKR,EAAMS,YCuDRC,E,4MA1DXC,MAAQ,CACJC,SAAU,GACVC,YAAa,I,EAUjBC,aAAe,SAAAC,GACX,IAAMC,EAAU,EAAKL,MAAMC,SAASK,QAAO,SAAAC,GAC3C,OAAOA,EAASd,KAAKC,MAAMc,cAAcC,SAASL,EAAKI,gBAAkBD,EAASd,KAAKE,KAAKa,cAAcC,SAASL,EAAKI,kBAExH,EAAKE,SAAS,CAACR,YAAaG,K,EAGhCM,UAAY,WACRC,EAAUC,MAAK,SAACC,EAAGC,GACf,OAAGD,EAAEjB,MAAQkB,EAAElB,OACH,EAED,KAGf,EAAKa,SAAL,YAAkBE,K,kEArBlBI,KAAKN,SAAS,CACVT,SAAUW,EACVV,YAAaU,M,+BAsBX,IAAD,OACT,OACI,oCAEA,2BAAOK,UAAU,eAAeC,SAAU,SAAAC,GAAC,OAAI,EAAKhB,aAAagB,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,eAE1G,2BAAON,UAAU,SACb,+BACI,4BACI,wBAAIO,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMC,QAAU,kBAAM,EAAKd,UAAU,WAA/C,SACA,wBAAIa,MAAM,OAAV,UAGR,+BACCR,KAAKhB,MAAME,YAAYwB,KAAI,SAACnB,GAAD,OACxB,kBAAC,EAAD,CAAOoB,IAAKpB,EAASqB,MAAMC,KAAMtC,MAAOgB,EAASuB,QAAQC,UAAWtC,KAAMc,EAASd,KAAMG,MAAOW,EAASX,MAAOC,MAAOU,EAASV,MAAOC,SAAUS,EAAST,SAASkC,iB,GAlD3JC,a,MCUTC,MAXf,WACI,OACI,yBAAKjB,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,0CCCDkB,EANC,SAAC9C,GACb,OACI,yBAAK4B,UAAU,WAAW5B,EAAM+C,WCezBC,MAdf,WACE,OACE,yBAAKpB,UAAU,iBACf,kBAAC,EAAD,KAEA,kBAAC,EAAD,MAEE,kBAAC,EAAD,SCAcqB,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31981d73.chunk.js","sourcesContent":["import React from 'react'\r\nconst Table = (props) => {\r\n    return (\r\n        <tr>\r\n            <td><img src={props.image} alt={props.name.first}/></td>\r\n            <td>{props.name.first} {props.name.last}</td>\r\n            <td>{props.phone}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.location}</td>\r\n        </tr>\r\n    )\r\n}\r\nexport default Table;","import React, { Component } from 'react'\r\nimport employees from '../employees.json'\r\nimport Table from './Table'\r\nclass TableBody extends Component {\r\n    //state to update table\r\n    state = {\r\n        mainlist: [],\r\n        currentList: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            mainlist: employees,\r\n            currentList: employees\r\n        });\r\n    }\r\n\r\n    handleChange = item => {\r\n        const newList = this.state.mainlist.filter(employee => {\r\n        return employee.name.first.toLowerCase().includes(item.toLowerCase()) || employee.name.last.toLowerCase().includes(item.toLowerCase())\r\n        });\r\n        this.setState({currentList: newList})\r\n    }\r\n\r\n    sortEmail = () => {\r\n        employees.sort((a, b) => {\r\n            if(a.email < b.email){\r\n                return -1;\r\n            } else {\r\n                return 1;\r\n            }\r\n        })\r\n        this.setState([...employees]);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <>\r\n        {/* Taking user input to update table, sorts by first name only */}\r\n        <input className=\"form-control\" onChange={e => this.handleChange(e.target.value)} type=\"text\" placeholder=\"John Smith\" />\r\n\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\"> </th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Phone</th>\r\n                    <th scope=\"col\" onClick= {() => this.sortEmail(\"email\")} >Email</th>\r\n                    <th scope=\"col\">City</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.state.currentList.map((employee) => (\r\n                <Table key={employee.login.uuid} image={employee.picture.thumbnail} name={employee.name} phone={employee.phone} email={employee.email} location={employee.location.city} />\r\n            ))}\r\n\r\n\r\n            </tbody>\r\n        </table>\r\n        </>\r\n    );\r\n}\r\n}\r\nexport default TableBody;","import React from 'react'\r\nimport '../styles/Header.css'\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Employee Directory</h1>\r\n                <p className=\"lead\">Search your current employees here!</p>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react'\r\n\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n\r\n}\r\nexport default Wrapper;","import React from 'react';\r\nimport './App.css';\r\nimport TableBody from './components/TableBody'\r\nimport Header from './components/Header'\r\nimport Wrapper from './components/Wrapper'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App container\">\r\n    <Wrapper>\r\n\r\n    <Header/>\r\n\r\n      <TableBody/>\r\n     \r\n    </Wrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}